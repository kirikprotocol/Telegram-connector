<%@ page import="mobi.eyeline.utils.restclient.web.RestClient" %>
<%@ page import="org.apache.log4j.Logger" %>
<%@ page import="java.net.HttpURLConnection" %>
<%@ page import="java.net.URL" %>
<%@ page import="static mobi.eyeline.utils.restclient.web.RestClient.delete" %>
<%@ page import="static mobi.eyeline.utils.restclient.web.RestClient.post" %>
<%@ page import="java.util.HashSet" %>
<%@ page import="java.util.Set" %>
<%@ page language="java" %>

<%!

  static final String MOBILIZER_ROOT = "http://devel.globalussd.mobi";
  static final String API_ROOT = "http://localhost:11201/wstorage";

  public static final String PHASE_ASKED_FOR_MSISDN = "ASKED_FOR_MSISDN";
  public static final String PHASE_HAS_MSISDN = "HAS_MSISDN";

  Logger getLog() {
    return Logger.getLogger("msisdn-confirmation");
  }

  /**
   * Complete MSISDN verification for the specified service & redirect to the next content page.
   *
   * Pre-conditions:
   *  - Verification is initiated for any service,
   *  - Specified MSISDN is requested to be verified by the user,
   *  - Specified MSISDN is successfully verified (e.g. by C2S request).
   *
   * Post-conditions:
   *  - MSISDN is persisted to the profile,
   *  - Current session is redirected to the next content page,
   *  - All the temporary verification data is cleaned up.
   */
  public void verify(String msisdn) throws Exception {

    //
    //  Update profile storage.
    //

    final JSONArray profiles = new RestClient()
        .json(API_ROOT + "/profile?services.auth-*.entered-msisdn=" + msisdn).array();

    for (int i = 0; i < profiles.length(); i++) {
      final String wnumber = profiles.getString(i);
      getLog().debug("Verifying MSISDN = [" + msisdn + "] for wnumber = [" + wnumber + "]");

      final Set<String> safeServiceIds = new HashSet<String>();
      {
        final JSONArray enteredMsisdnProps = new RestClient()
            .json(API_ROOT + "/profile/" + wnumber + "/services.auth-*.entered-msisdn/list").array();

        for (int j = 0; j < enteredMsisdnProps.length(); j++) {
          final JSONObject prop = enteredMsisdnProps.getJSONObject(j);

          if (msisdn.equals(prop.getString("value"))) {
            final String path = prop.getString("path");
            final String[] parts = path.split("\\.");
            if (parts.length == 3 && parts[1].startsWith("auth-")) {
              safeServiceIds.add(parts[1].replace("auth-", ""));
            }
          }
        }
      }

      final Set<String> serviceIds = new HashSet<String>() {{
        for (String safeSid : safeServiceIds) {
          add(
              new RestClient()
                  .json(API_ROOT + "/profile/" + wnumber + "services.auth-" + safeSid + ".service-id")
                  .text()
          );
        }
      }};

      for (String serviceId : serviceIds) {
        verify(msisdn, wnumber, serviceId);
      }

    }
  }

  private void verify(String msisdn, String wnumber, String serviceId) throws Exception {
    final String safeSid = serviceId.replace(".", "_");

    new RestClient()
        .json(API_ROOT + "/profile/" + wnumber + "/mobile.msisdn", post(RestClient.content(msisdn)));

    new RestClient()
        .json(API_ROOT + "/profile/" + wnumber + "/services.auth-" + safeSid + ".service-id", delete());
    new RestClient()
        .json(API_ROOT + "/profile/" + wnumber + "/services.auth-" + safeSid + ".phase", delete());
    new RestClient()
        .json(API_ROOT + "/profile/" + wnumber + "/services.auth-" + safeSid + ".entered-msisdn", delete());

    //
    //  Push the next service page.
    //

    sendGet(MOBILIZER_ROOT + "/push?" +
        "service=" + serviceId +
        "&subscriber=" + wnumber +
        "&protocol=telegram" +
        "&scenario=default");
  }

  public static String getWnumber(HttpServletRequest req) {
    final String wnumber = req.getParameter("wnumber");
    return (wnumber == null || wnumber.isEmpty()) ? req.getParameter("subscriber") : wnumber;
  }

  private void sendGet(String url) throws Exception {
    final HttpURLConnection con = (HttpURLConnection) new URL(url).openConnection();
    con.setRequestMethod("GET");
    con.getInputStream().close();
  }

%>